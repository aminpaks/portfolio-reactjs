{"version":3,"sources":["Theme/Theme.tsx","Theme/Utils/Colors.ts","Theme/Utils/Hooks/GetBreakpoints.ts","Theme/Utils/Util.ts","Theme/Utils/index.ts","App.styled.ts","Pages/Home/Route.tsx","Styleguide/Route.tsx","App.tsx","serviceWorker.ts","index.tsx","Theme/index.ts"],"names":["__webpack_require__","d","__webpack_exports__","ThemeProvider","styled","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","styled_components__WEBPACK_IMPORTED_MODULE_1__","defaultTheme","colorSet","text","textInverted","primary","secondary","tertiary","gray","grayDark","success","info","warning","danger","breakpoints","xs","sm","md","lg","xl","xxl","tokens","spacing","_ref","children","onlyChild","React","Children","only","isValidElement","TypeError","a","createElement","theme","baseStyled","getRandomColor","red","Math","floor","random","toString","padStart","green","blue","concat","shouldUseDarkForeground","background","color","c","colorUtils","redColor","pow","greenColor","blueColor","sqrt","getPerceivedBrightness","getForegroundColor","backgroundColor","whiten","ratio","hex","lighten","darken","fade","opacity","rgb","mixWith","origin","mixture","mixtureWeight","mix","allBreakpoints","reMAX","useGetBreakpointWidth","breakpoint","setting","useContext","ThemeContext","isMax","test","width","nextBreakpointIndex","indexOf","parseCSSValue","input","exec","undefined","_ref2","Object","slicedToArray","potentialValue","potentialUnit","value","parseFloat","unit","getPropValue","_ref3","prop","defaultValue","_ref3$normalize","normalize","props","propertyValue","_parseCSSValue","toFixed","validTokens","getTokenValue","side","tokenType","propName","propValue","components","_ref4","_ref5","_ref5$","top","right","bottom","left","getValueFromShorthand","property","reduce","acc","cur","index","includes","Array","length","mapTokenToValue","getNormalizedTokenValue","_ref6","defaultTokenKey","tokenKey","_parseCSSValue2","computedValue","replace","getBreakpoint","normalizer","_ref7","Colors_whiten","Colors_lighten","Colors_darken","Colors_fade","Colors_mixWith","GetBreakpoints_useGetBreakpointWidth","Util_getBreakpoint","GlobalStyles","createGlobalStyle","_templateObject","div","_templateObject2","img","_templateObject3","header","_templateObject4","HomePage","lazy","Promise","all","e","then","bind","HomePageRoute","react_default","Route","key","exact","path","render","StyleguidePage","StyleguidePageRoute","WebFont","load","google","families","App","Theme","Fragment","HashRouter","basename","react","fallback","Switch","Redirect","to","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","styled_components__WEBPACK_IMPORTED_MODULE_0__","_Theme__WEBPACK_IMPORTED_MODULE_1__","_types__WEBPACK_IMPORTED_MODULE_2__","o","_Utils__WEBPACK_IMPORTED_MODULE_3__","StyledThemeContext"],"mappings":"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","file":"static/js/main.bd0742e5.chunk.js","sourcesContent":["import React, { FC } from 'react';\nimport baseStyled, { ThemedStyledInterface, ThemeProvider as StyledThemeProvider } from 'styled-components';\n\nimport { Theme } from './types';\n\nexport const defaultTheme: Theme = {\n  colorSet: {\n    text: '#262f3c',\n    textInverted: '#fff',\n\n    primary: '#0accbe',\n    secondary: '#5f67df',\n    tertiary: '#ffea5c',\n\n    gray: '#6c757d',\n    grayDark: '#343a40',\n\n    success: '#28a745',\n    info: '#17a2b8',\n    warning: '#ffc107',\n    danger: '#dc3545',\n  },\n  breakpoints: {\n    xs: 0,\n    sm: 576,\n    md: 768,\n    lg: 992,\n    xl: 1200,\n    xxl: 1600,\n  },\n  tokens: {\n    spacing: {\n      xs: '0.7143rem',\n      sm: '1.2857rem',\n      md: '1.85715rem',\n      lg: '2.7143rem',\n      xl: '3.7143rem',\n      xxl: '5.7143rem',\n    },\n  },\n};\n\nexport const ThemeProvider: FC = ({ children }) => {\n  const onlyChild = React.Children.only(children);\n\n  if (onlyChild == null || !React.isValidElement<any>(onlyChild)) {\n    throw new TypeError('You need to pass only one valid component as the children of ThemeProvider');\n  }\n\n  return <StyledThemeProvider theme={defaultTheme}>{onlyChild}</StyledThemeProvider>;\n};\n\nexport const styled = baseStyled as ThemedStyledInterface<Theme>;\n","import colorUtils from 'color';\n\nexport const getPerceivedBrightness = (color: string) => {\n  // Calculate the perceived brightness of a color\n  // http://www.nbdtech.com/Blog/archive/2008/04/27/Calculating-the-Perceived-Brightness-of-a-Color.aspx\n  const c = colorUtils(color);\n  const redColor = c.red() ** 2 * 0.241;\n  const greenColor = c.green() ** 2 * 0.691;\n  const blueColor = c.blue() ** 2 * 0.068;\n\n  return Math.sqrt(redColor + greenColor + blueColor);\n};\n\nexport const getRandomColor = () => {\n  const red = Math.floor(Math.random() * 255)\n    .toString(16)\n    .padStart(2, '0');\n  const green = Math.floor(Math.random() * 255)\n    .toString(16)\n    .padStart(2, '0');\n  const blue = Math.floor(Math.random() * 255)\n    .toString(16)\n    .padStart(2, '0');\n\n  return `#${red}${green}${blue}`;\n};\n\nexport const shouldUseDarkForeground = (background: string) => getPerceivedBrightness(background) >= 130;\n\nexport const getForegroundColor = (backgroundColor: string, colorSet?: { text: string; textInverted: string }) => {\n  const { text, textInverted } = colorSet || { text: '#000', textInverted: '#fff' };\n\n  return shouldUseDarkForeground(backgroundColor) ? text : textInverted;\n};\n\nexport const whiten = (color: string, ratio: number) =>\n  colorUtils(color)\n    .whiten(ratio)\n    .hex()\n    .toString();\n\nexport const blacken = (color: string, ratio: number) =>\n  colorUtils(color)\n    .blacken(ratio)\n    .hex()\n    .toString();\n\nexport const lighten = (color: string, ratio: number) =>\n  colorUtils(color)\n    .lighten(ratio)\n    .hex()\n    .toString();\n\nexport const darken = (color: string, ratio: number) =>\n  colorUtils(color)\n    .darken(ratio)\n    .hex()\n    .toString();\n\nexport const fade = (color: string, opacity: number) =>\n  colorUtils(color)\n    .fade(1 - opacity)\n    .rgb()\n    .toString();\n\nexport const saturate = (color: string, ratio: number) =>\n  colorUtils(color)\n    .saturate(ratio)\n    .hex()\n    .toString();\n\nexport const mixWith = (origin: string, mixture: string, mixtureWeight: number) =>\n  colorUtils(origin)\n    .mix(colorUtils(mixture), mixtureWeight)\n    .hex()\n    .toString();\n","import { useContext } from 'react';\nimport { ViewBreakpoint, ViewBreakpointSetting, ThemeContext } from 'src/Theme';\n\nconst allBreakpoints: ViewBreakpoint[] = ['xs', 'sm', 'md', 'lg', 'xl', 'xxl'];\nconst reMAX = /^max/i;\n\nexport const useGetBreakpointWidth = (breakpoint: ViewBreakpoint, setting?: ViewBreakpointSetting) => {\n  const { breakpoints } = useContext(ThemeContext);\n  const isMax = reMAX.test(setting || 'min-width');\n  let width = breakpoints[breakpoint];\n\n  if (isMax) {\n    const nextBreakpointIndex = allBreakpoints.indexOf(breakpoint) + 1;\n    width = breakpoints[allBreakpoints[nextBreakpointIndex]] || 9999999;\n  }\n\n  return width;\n};\n","import { isDev } from 'src/Utils';\nimport { PropertySide, WithThemeProps, CSSShorthandProperty, TokenType, TokenValue, ViewBreakpoint } from '../types';\n\nconst parseCSSValue = (input: string) => {\n  const [, potentialValue, potentialUnit] = /(\\d+(?:\\.\\d+)?)(\\w+)?/i.exec(input) || [undefined, '0', 'em'];\n  return { value: parseFloat(potentialValue), unit: potentialUnit };\n};\n\nexport const getPropValue = <T>({\n  prop,\n  defaultValue,\n  normalize = 1,\n}: {\n  prop: Extract<keyof T, string>;\n  defaultValue?: string;\n  normalize?: number;\n}) => (props: T) => {\n  const propertyValue: any = props[prop] || defaultValue;\n  if (propertyValue == null) {\n    return undefined;\n  }\n  const { value, unit } = parseCSSValue(propertyValue);\n  return value === 0 ? '0' : (value * normalize).toFixed(2) + unit;\n};\n\nexport const getValueFromShorthand = <T>(side: 'top' | 'right' | 'left' | 'bottom', components?: [T, T?, T?, T?]) => {\n  const [top = '0', right, bottom, left] = components || [null, undefined, undefined, undefined];\n  switch (side) {\n    case 'top':\n      return top;\n    case 'right':\n      return right || top;\n    case 'bottom':\n      return bottom || top;\n    case 'left':\n      return left || right || top;\n    default:\n      throw new TypeError('Side is not a valid side type');\n  }\n};\n\nconst validateCssShorthandProperty = <T extends string>(value?: CSSShorthandProperty<T> | null) => {\n  if (value == null || !Array.isArray(value) || value.length <= 0 || value.length <= 4) {\n    throw new TypeError('CSS components must be an array with at least one element');\n  }\n};\n\nconst validTokens = ['xs', 'sm', 'md', 'lg', 'xl', 'xxl'];\n\nconst mapTokenToValue = <T extends string, U extends string>(\n  tokens: TokenValue,\n  property: CSSShorthandProperty<T>,\n): CSSShorthandProperty<U> => {\n  return property.reduce(\n    (acc, cur, index) => {\n      if (cur == null) {\n        return acc;\n      }\n      acc[index] = validTokens.includes(cur) ? tokens[cur] : cur;\n      return acc;\n    },\n    Array(property.length) as CSSShorthandProperty<any>,\n  );\n};\n\nexport const getTokenValue = <T extends {}, U extends string>(\n  side: PropertySide,\n  tokenType: TokenType,\n  propName: keyof T,\n  defaultValue?: CSSShorthandProperty<U>,\n) => (props: WithThemeProps<T>) => {\n  const propValue = (props[propName] as unknown) || defaultValue;\n  const tokens = props.theme.tokens[tokenType];\n  if (propValue != null) {\n    return getValueFromShorthand(side, mapTokenToValue(tokens, propValue as CSSShorthandProperty<string>));\n  }\n  return null;\n};\n\nexport const getNormalizedTokenValue = <T, TokenKey extends string>({\n  tokenType,\n  propName,\n  normalize,\n  defaultTokenKey,\n}: {\n  tokenType: TokenType;\n  propName: Extract<keyof T, string>;\n  normalize?: number;\n  defaultTokenKey?: TokenKey;\n}) => (props: WithThemeProps<T>) => {\n  const tokenKey = (props[propName] as unknown) || defaultTokenKey;\n  const tokens = props.theme.tokens[tokenType];\n  if (tokenKey != null) {\n    const potentialValue = tokens[tokenKey as string];\n\n    if (potentialValue) {\n      const { value, unit } = parseCSSValue(potentialValue);\n      const computedValue = (value * (normalize || 1)).toFixed(2).replace(/\\.00$/, '');\n\n      return computedValue === '0' ? '0' : computedValue + unit;\n    }\n  }\n  return null;\n};\n\nexport const getBreakpoint = <T>(breakpoint: ViewBreakpoint, normalizer?: (value: number) => number) => ({\n  theme: { breakpoints },\n}: WithThemeProps<T>) => {\n  let value = breakpoints[breakpoint];\n\n  if (typeof normalizer === 'function') {\n    value = normalizer(value);\n    if (isDev() && value != null) {\n      throw new Error('Normalizer returned undefined value, did you forgot to return a value?');\n    }\n  }\n  return value + 'px';\n};\n","export * from './Colors';\nexport * from './Hooks';\nexport * from './Util';\n","import styled, { createGlobalStyle } from 'styled-components';\nimport { ThemeProps } from 'src/Theme';\n\nexport const GlobalStyles = createGlobalStyle<ThemeProps>`\n  html {\n    color: ${props => props.theme.colorSet.text};\n    font-size: 14px;\n    line-height: 1.6;\n  }\n  html, body {\n    display: flex;\n    flex: 1 0 100%;\n    flex-direction: column;\n    min-height: 100%;\n  }\n  body {\n    margin: 0;\n    padding: 0;\n    font-family: 'Open Sans', sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n\n  code {\n    font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace;\n  }\n\n  a {\n    color: inherit;\n  }\n\n  b {\n    font-weight: 700;\n  }\n\n  #root {\n    display: flex;\n    flex: 1 0 auto;\n    flex-direction: column;\n  }\n\n  code {\n    text-align: left;\n\n    pre {\n      display: block;\n      overflow: auto;\n      margin-top: 1em;\n      margin-bottom: 0;\n      padding: 0.4em 0 1.6em;\n    }\n  }\n`;\n\nexport const StyledContainer = styled.div`\n  text-align: center;\n`;\n\nexport const StyledLogo = styled.img`\n  animation: App-logo-spin infinite 20s linear;\n  height: 40vmin;\n`;\n\nexport const StyledHeader = styled.header`\n  background-color: #282c34;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: white;\n`;\n","import React, { lazy } from 'react';\nimport { Route } from 'react-router-dom';\n\nconst HomePage = lazy(() => import('./Home'));\nexport const renderHomePage = (props: any) => <HomePage {...props} />;\nexport const HomePageRoute = <Route key=\"home-page\" exact path=\"/\" render={renderHomePage} />;\n","import React, { lazy } from 'react';\nimport { Route } from 'react-router-dom';\n\nconst StyleguidePage = lazy(() => import('./Page'));\nexport const renderStyleguidePage = (props: any) => <StyleguidePage {...props} />;\nexport const StyleguidePageRoute = <Route key=\"styleguide\" path=\"/styleguide\" render={renderStyleguidePage} />;\n","import WebFont from 'webfontloader';\nimport React, { Suspense } from 'react';\nimport { HashRouter, Switch, Redirect } from 'react-router-dom';\n\nimport { GlobalStyles } from './App.styled';\nimport { HomePageRoute } from './Pages';\nimport { StyleguidePageRoute } from './Styleguide';\nimport { ThemeProvider } from './Theme';\n\nWebFont.load({\n  google: {\n    families: ['Open Sans:400,600,700'],\n  },\n});\n\nconst App = () => (\n  <ThemeProvider>\n    <>\n      <GlobalStyles />\n      <HashRouter basename=\"/\">\n        <Suspense fallback={<div>Loading</div>}>\n          <Switch>{[HomePageRoute, StyleguidePageRoute, <Redirect key=\"redirect-to-home\" to=\"/\" />]}</Switch>\n        </Suspense>\n      </HashRouter>\n    </>\n  </ThemeProvider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { Context } from 'react';\nimport { ThemeContext as StyledThemeContext } from 'styled-components';\n\nimport { styled } from './Theme';\nimport { Theme } from './types';\nexport * from './Theme';\nexport * from './types';\nexport * from './Utils';\n\n// I kept this here as TSX doesn't allow for type assertion\nexport const ThemeContext: Context<Theme> = StyledThemeContext;\n\nexport default styled;\n"],"sourceRoot":""}